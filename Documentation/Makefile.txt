##############################################################################
# Makefile ‚Äî environment setup and pipeline orchestration
#
# Before you run any of these targets, create a file named ".env" in the
# project root (or export these variables in your shell). The .env must contain:
#
#   # Your Materials Project API key (sign up at materialsproject.org)
#   MAPI_KEY=vW8JNEA7oP1DvlUy72cBAEjdCJk4aCPK   # ‚Üê replace with your own key
#
#   # Neo4j credentials (used by neo4j_load_pg.py & neo4j_load_kg.py)
#   export NEO4J_URI=bolt://localhost:7687
#   export NEO4J_USER=neo4j           # ‚Üê or your own Neo4j username
#   export NEO4J_PW=neo4jPass         # ‚Üê or your own Neo4j password
#
# Load them in Bash via:
#   source .env
##############################################################################

# -------------------------------------------------------
# Usage:
#   make env             ‚Üê create & populate conda env
#   make install         ‚Üê pip-install into already-active env
#   make clean           ‚Üê remove the conda env
#
#   make ingest          ‚Üê run all data_ingest_*.py (requires MAPI_KEY)
#   make standardize     ‚Üê run standardize.py
#   make build           ‚Üê run build_graphs.py
#   make export-prop     ‚Üê run export_propertyGraphs.py
#   make export-kg       ‚Üê run export_knowledgeGraphs.py
#   make mlflow-track    ‚Üê run mlflow_track.py
#   make pipeline        ‚Üê run steps ingest ‚Üí export-kg ‚Üí mlflow-track
#
#   make sanity          ‚Üê run sanity_check.py
#   make vis             ‚Üê run visualize_pyvis.py --type all
#   make neo4j-pg        ‚Üê load property‚Äëgraphs into Neo4j (requires NEO4J_*)
#   make neo4j-kg        ‚Üê load TTL into Neo4j via n10s (requires NEO4J_*)
#   make serve           ‚Üê launch KG Flask service (see notes below)
# -------------------------------------------------------

ENV_NAME   := erau_graph
PYTHON_VER := 3.9
CHANNEL    := -c conda-forge
PY         := conda run -n $(ENV_NAME) python

.PHONY: env install clean \
        ingest standardize build export-prop export-kg mlflow-track pipeline \
        sanity vis neo4j-pg neo4j-kg serve export-kg-service

# ‚îÄ‚îÄ‚îÄ Environment ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

env:
	@echo "‚è≥ Creating conda env '$(ENV_NAME)' with Python $(PYTHON_VER)‚Ä¶"
	conda create -n $(ENV_NAME) python=$(PYTHON_VER) $(CHANNEL) rdkit -y
	@echo "‚úîÔ∏è  Base env ready. Installing everything else via pip‚Ä¶"
	conda run -n $(ENV_NAME) pip install -r requirements.txt
	@echo "‚úÖ Environment '$(ENV_NAME)' is all set."

install:
	@echo "‚è≥ Installing Python dependencies into current env‚Ä¶"
	pip install -r requirements.txt
	@echo "‚úÖ pip install complete."

clean:
	@echo "üóëÔ∏è  Removing conda env '$(ENV_NAME)'‚Ä¶"
	conda env remove -n $(ENV_NAME) -y
	@echo "‚úÖ Environment removed."

# ‚îÄ‚îÄ‚îÄ Main Pipeline ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

ingest:
	@# Fail early if MAPI_KEY is not set
	@test -n "$(MAPI_KEY)" || (echo "‚ùå Error: MAPI_KEY not set. source .env" >&2; exit 1)
	@echo "‚è≥ Running all data_ingest_*.py‚Ä¶"
	$(PY) scripts/data_ingest_mp.py
	$(PY) scripts/data_ingest_pubchem.py
	$(PY) scripts/data_ingest_chebi.py
	@echo "‚úÖ Data ingestion complete."

standardize:
	@echo "‚è≥ Standardizing raw data‚Ä¶"
	$(PY) scripts/standardize.py
	@echo "‚úÖ Standardization complete."

build:
	@echo "‚è≥ Building property‚Äëgraph pickles‚Ä¶"
	$(PY) scripts/build_graphs.py
	@echo "‚úÖ Graphs built."

export-prop:
	@echo "‚è≥ Exporting property‚Äëgraphs‚Ä¶"
	$(PY) scripts/export_propertyGraphs.py
	@echo "‚úÖ Property‚Äëgraph exports complete."

export-kg:
	@echo "‚è≥ Exporting knowledge‚Äëgraphs‚Ä¶"
	$(PY) scripts/export_knowledgeGraphs.py
	@echo "‚úÖ Knowledge‚Äëgraph exports complete."

mlflow-track:
	@echo "‚è≥ Logging pipeline run to MLflow‚Ä¶"
	$(PY) scripts/mlflow_track.py
	@echo "‚úÖ MLflow tracking complete."

pipeline: ingest standardize build export-prop export-kg mlflow-track
	@echo "üéâ Full pipeline complete."

# ‚îÄ‚îÄ‚îÄ Optional Utilities ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

sanity:
	@echo "‚öôÔ∏è  Running sanity checks‚Ä¶"
	$(PY) scripts/sanityCheck.py

vis:
	@echo "‚öôÔ∏è  Generating HTML visualizations‚Ä¶"
	$(PY) scripts/visualize_pyvis.py --type all

neo4j-pg:
	@# Fail early if Neo4j creds are not set
	@test -n "$(NEO4J_URI)$(NEO4J_USER)$(NEO4J_PW)" || (echo "‚ùå Error: NEO4J_* not set. source .env" >&2; exit 1)
	@echo "‚öôÔ∏è  Loading property‚Äëgraphs into Neo4j‚Ä¶"
	$(PY) scripts/neo4j_load_pg.py

neo4j-kg:
	@# Fail early if Neo4j creds are not set
	@test -n "$(NEO4J_URI)$(NEO4J_USER)$(NEO4J_PW)" || (echo "‚ùå Error: NEO4J_* not set. source .env" >&2; exit 1)
	@echo "‚öôÔ∏è  Loading TTL into Neo4j via n10s‚Ä¶"
	$(PY) scripts/neo4j_load_kg.py

serve:
	@echo "‚öôÔ∏è  To run the KG service:"
	@echo "    1) Ensure you're in the project root and in the '$(ENV_NAME)' env"
	@echo "    2) If you don't have 'exports/KnowledgeGraphs/materials.ttl', run:"
	@echo "         make export-kg-service"
	@echo "    3) Then start the server:"
	@echo "         make serve-server"
	@echo

serve-server:
	@echo "üöÄ Launching SPARQL & GraphQL service on http://0.0.0.0:5000 ‚Ä¶"
	$(PY) scripts/kg_service.py --serve

export-kg-service:
	@echo "‚öôÔ∏è  Generating TTL for KG service‚Ä¶"
	$(PY) scripts/kg_service.py --export-kg
